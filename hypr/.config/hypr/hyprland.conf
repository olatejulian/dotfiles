# This is an example Hyprland config file.
# Refer to the wiki for more information.
# https://wiki.hypr.land/Configuring/

# Please note not all available settings / options are set here.
# For a full list, see the wiki

# You can split this configuration into multiple files
# Create your files separately and then link them to this file like this:
# source = ~/.config/hypr/myColors.conf


################
### MONITORS ###
################

# See https://wiki.hypr.land/Configuring/Monitors/
monitor=eDP-1,1366x768@60.00500Hz,0x0,1


###################
### MY PROGRAMS ###
###################

# See https://wiki.hypr.land/Configuring/Keywords/

# Set programs that you use
$terminal = ghostty
$fileManager = nautilus
$menu = rofi -show drun


#################
### AUTOSTART ###
#################

# Autostart necessary processes (like notifications daemons, status bars, etc.)
# Or execute your favorite apps at launch like this:
exec-once = eww daemon
exec-once = hyprpaper
exec-once = waybar


#############################
### ENVIRONMENT VARIABLES ###
#############################

# See https://wiki.hypr.land/Configuring/Environment-variables/
env = GDK_SCALE,1
env = GTK_THEME,Dracula
env = HYPRCURSOR_THEME,Bibata-Modern-Amber
env = HYPRCURSOR_SIZE,24
env = XCURSOR_THEME,Bibata-Modern-Amber
env = XCURSOR_SIZE,24


###################
### KEYBINDINGS ###
###################

# See https://wiki.hypr.land/Configuring/Keywords/
$mainMod = SUPER # Sets "Windows" key as main modifier

# Example binds, see https://wiki.hypr.land/Configuring/Binds/ for more
bind = $mainMod, Q, killactive,
bind = $mainMod, E, exit,
bind = $mainMod, V, togglefloating,
bind = $mainMod, SPACE, exec, $menu
bind = $mainMod, P, pseudo, # dwindle
bind = $mainMod, J, togglesplit, # dwindle

# Move focus with mainMod + vim directions
bind = $mainMod, H, movefocus, l
bind = $mainMod, J, movefocus, d
bind = $mainMod, K, movefocus, u
bind = $mainMod, L, movefocus, r

# Move active window with mainMod + SHIFT + vim directions
bind = $mainMod SHIFT, H, movewindow, l
bind = $mainMod SHIFT, J, movewindow, d
bind = $mainMod SHIFT, K, movewindow, u
bind = $mainMod SHIFT, L, movewindow, r

# Resize active window with mainMod + UIOP directions
bind = $mainMod, U, resizeactive, -10 0
bind = $mainMod, I, resizeactive, 0 10
bind = $mainMod, O, resizeactive, 0 -10
bind = $mainMod, P, resizeactive, 10 0

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl -e4 -n2 set 5%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl -e4 -n2 set 5%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous

# Screenshot bindings
bind = , PRINT, exec, hyprshot -m output             # Full monitor
bind = $mainMod, PRINT, exec, hyprshot -m window     # Active window
bind = $maindMod SHIFT, PRINT, exec, hyprshot -m region    # Select region

##############################
### WINDOWS AND WORKSPACES ###
##############################

# See https://wiki.hypr.land/Configuring/Window-Rules/ for more
# See https://wiki.hypr.land/Configuring/Workspace-Rules/ for workspace rules

# Example windowrule
# windowrule = float,class:^(kitty)$,title:^(kitty)$

windowrulev2 = float,stayfocused,cursor 50% 50%,nomaxsize,noborder,noshadow,title:^(Volume Control)

windowrulev2 = float,stayfocused,cursor 50% 50%,nomaxsize,noborder,noshadow,title:^(Bluetooth)

windowrulev2 = float,stayfocused,cursor 50% 50%,nomaxsize,noborder,noshadow,title:^(Network Connections)

# Ignore maximize requests from apps. You'll probably like this.
windowrule = suppressevent maximize, class:.*

# Fix some dragging issues with XWayland
windowrule = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0

# Ref https://wiki.hypr.land/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrule = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrule = rounding 0, floating:0, onworkspace:w[tv1]
# windowrule = bordersize 0, floating:0, onworkspace:f[1]
# windowrule = rounding 0, floating:0, onworkspace:f[1]


###################
### PERMISSIONS ###
###################
# See https://wiki.hypr.land/Configuring/Permissions/
# Please note permission changes here require a Hyprland restart and are not applied on-the-fly
# for security reasons

# permission = /usr/(bin|local/bin)/grim, screencopy, allow
# permission = /usr/(lib|libexec|lib64)/xdg-desktop-portal-hyprland, screencopy, allow
# permission = /usr/(bin|local/bin)/hyprpm, plugin, allow


################
### SETTINGS ###
################
general {
    # type: bool
    # default: false
    # desc: master switch for allowing tearing to occur. See the Tearing page.
    # Please see https://wiki.hypr.land/Configuring/Tearing/ before you turn this on
    allow_tearing = false

    # type: int
    # default: 1
    # desc: size of the border around windows
    border_size = 1

    # type: gradient
    # default: 0xffffffff
    # desc: border color for the active window
    # https://wiki.hypr.land/Configuring/Variables/#variable-types for info about colors
    # col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.active_border = rgba(BD93F9EE) rgba(FF79C6EE) 45deg

    # type: gradient
    # default: 0xff444444
    # desc: border color for inactive windows
    col.inactive_border = rgba(595959aa)

    # type: gradient
    # default: 0xffffaaff
    # desc: inactive border color for window that cannot be added to a group (see denywindowfromgroup dispatcher)
    col.nogroup_border = 0xffffaaff

    # type: gradient
    # default: 0xffff00ff
    # desc: active border color for window that cannot be added to a group
    col.nogroup_border_active = 0xffff00ff

    # type: int
    # default: 15
    # desc: extends the area around the border where you can click and drag on, only used when general:resize_on_border is on.
    extend_border_grab_area = 15

    # type: int
    # default: 0
    # desc: gaps between windows and monitor edges for floating windows, also supports css style
    # gaps (top, right, bottom, left -> 5 10 15 20). -1 means default
    float_gaps = 0

    # type: int
    # default: 5
    # desc: gaps between windows, also supports css style gaps (top, right, bottom, left -> 5,10,15,20)
    gaps_in = 5

    # type: int
    # default: 20
    # desc: gaps between windows and monitor edges, also supports css style gaps
    # (top, right, bottom, left -> 5,10,15,20)
    gaps_out = 5

    # type: int
    # default: 0
    # desc: gaps between workspaces. Stacks with gaps_out.
    gaps_workspaces = 0

    # type: bool
    # default: true
    # desc: show a cursor icon when hovering over borders, only used when general:resize_on_border is on.
    hover_icon_on_border = true

    # type: str
    # default: dwindle
    # desc: which layout to use. [dwindle/master]
    layout = dwindle

    # type: bool
    # default: false
    # desc: disable borders for floating windows
    no_border_on_floating = false

    # type: bool
    # default: false
    # desc: if true, will not fall back to the next available window when moving focus in a direction where no window was found
    no_focus_fallback = false

    # type: int
    # default: 0
    # desc: force floating windows to use a specific corner when being resized (1-4 going clockwise from top left, 0 to disable)
    resize_corner = 0

    # type: bool
    # default: false
    # desc: enables resizing windows by clicking and dragging on borders and gaps
    resize_on_border = false

    # (does not exist)
    # type: int
    # default: (not specified in table — needs clarification)
    # desc: minimum gap in pixels between windows before snapping
    # window_gap = 0


    snap {
        # type: bool
        # default: false
        # desc: if true, windows snap such that only one border’s worth of space is between them
        border_overlap = false

        # type: bool
        # default: false
        # desc: enable snapping for floating windows
        enabled = false

        # type: int
        # default: 10
        # desc: minimum gap in pixels between window and monitor edges before snapping
        monitor_gap = 10

        # type: bool
        # default: false
        # desc: if true, snapping will respect gaps between windows (set in general:gaps_in)
        respect_gaps = false

        # type: int
        # default: 10
        # desc: minimum gap in pixels between windows before snapping
        window_gap = 10
    }

}

# See https://wiki.hypr.land/Configuring/Dwindle-Layout/ for more
dwindle {
    preserve_split = true # You probably want this
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
}

# See https://wiki.hypr.land/Configuring/Master-Layout/ for more
master {
    new_status = master
}

# https://wiki.hypr.land/Configuring/Variables/#decoration
decoration {
    # type: float
    # default: 1.0
    # desc: opacity of active windows. [0.0 - 1.0]
    active_opacity = 1.0

    # type: bool
    # default: (unspecified, likely false)
    # desc: whether the window border should be a part of the window
    border_part_of_window = false

    # type: float
    # default: 0.4
    # desc: how much the dimaround window rule should dim by. [0.0 - 1.0]
    dim_around = 0.4

    # type: bool
    # default: false
    # desc: enables dimming of inactive windows
    dim_inactive = false

    # (does not exist)
    # type: bool
    # default: true
    # desc: enables dimming of parents of modal windows
    # dim_modal = true

    # type: float
    # default: 0.2
    # desc: how much to dim the rest of the screen by when a special workspace is open. [0.0 - 1.0]
    dim_special = 0.2

    # type: float
    # default: 0.5
    # desc: how much inactive windows should be dimmed [0.0 - 1.0]
    dim_strength = 0.5

    # type: float
    # default: 1.0
    # desc: opacity of fullscreen windows. [0.0 - 1.0]
    fullscreen_opacity = 1.0

    # type: float
    # default: 1.0
    # desc: opacity of inactive windows. [0.0 - 1.0]
    inactive_opacity = 1.0

    # type: int
    # default: 0
    # desc: rounded corners’ radius (in layout px)
    rounding = 0

    # type: float
    # default: 2.0
    # desc: adjusts the curve used for rounding corners, larger is smoother, 2.0 is a circle, 4.0 is a squircle. [2.0 - 10.0]
    rounding_power = 2.0

    # type: str
    # default: [[Empty]]
    # desc: a path to a custom shader to be applied at the end of rendering. See examples/screenShader.frag for an example.
    screen_shader =

    blur {
        # type: float
        # default: 0.8172
        # desc: brightness modulation for blur. [0.0 - 2.0]
        brightness = 0.8172

        # type: float
        # default: 0.8916
        # desc: contrast modulation for blur. [0.0 - 2.0]
        contrast = 0.8916

        # type: bool
        # default: true
        # desc: enable kawase window background blur
        enabled = true

        # type: bool
        # default: true
        # desc: make the blur layer ignore the opacity of the window
        ignore_opacity = true

        # type: bool
        # default: false
        # desc: whether to blur input methods (e.g. fcitx5)
        input_methods = false

        # type: float
        # default: 0.2
        # desc: works like ignorealpha in layer rules. If pixel opacity is below set value, will not blur. [0.0 - 1.0]
        input_methods_ignorealpha = 0.2

        # type: bool
        # default: true
        # desc: whether to enable further optimizations to the blur. Recommended to leave on, as it will massively improve performance.
        new_optimizations = true

        # type: float
        # default: 0.0117
        # desc: how much noise to apply. [0.0 - 1.0]
        noise = 0.0117

        # type: int
        # default: 1
        # desc: the amount of passes to perform
        passes = 1

        # type: bool
        # default: false
        # desc: whether to blur popups (e.g. right-click menus)
        popups = false

        # type: float
        # default: 0.2
        # desc: works like ignorealpha in layer rules. If pixel opacity is below set value, will not blur. [0.0 - 1.0]
        popups_ignorealpha = 0.2

        # type: int
        # default: 8
        # desc: blur size (distance)
        size = 3

        # type: bool
        # default: false
        # desc: whether to blur behind the special workspace (note: expensive)
        special = false

        # type: float
        # default: 0.1696
        # desc: increase saturation of blurred colors. [0.0 - 1.0]
        vibrancy = 0.1696

        # type: float
        # default: 0.0
        # desc: how strong the effect of vibrancy is on dark areas. [0.0 - 1.0]
        vibrancy_darkness = 0.0

        # type: bool
        # default: false
        # desc: if enabled, floating windows will ignore tiled windows in their blur. Only available if new_optimizations is true. Will reduce overhead on floating blur significantly.
        xray = false
    }

    shadow {
        # type: color
        # default: 0xee1a1a1a
        # desc: shadow’s color. Alpha dictates shadow’s opacity.
        color = 0xee1a1a1a

        # (unset error)
        # type: color
        # default: unset
        # desc: inactive shadow color. (if not set, will fall back to color)
        # color_inactive =

        # type: bool
        # default: true
        # desc: enable drop shadows on windows
        enabled = true

        # type: bool
        # default: true
        # desc: if true, the shadow will not be rendered behind the window itself, only around it.
        ignore_window = true

        # type: vec2
        # default: [0, 0]
        # desc: shadow’s rendering offset.
        offset = 0 0

        # type: int
        # default: 4
        # desc: shadow range (“size”) in layout px
        range = 4

        # type: int
        # default: 3
        # desc: in what power to render the falloff (more power, the faster the falloff) [1 - 4]
        render_power = 3

        # type: float
        # default: 1.0
        # desc: shadow’s scale. [0.0 - 1.0]
        scale = 1.0

        # type: bool
        # default: false
        # desc: if enabled, will make the shadows sharp, akin to an infinite render power
        sharp = false
    }
}

# https://wiki.hypr.land/Configuring/Variables/#animations
animations {
    enabled = yes, please :)

    # type: bool
    # default: true
    # dec: enable first launch animation
    first_launch_animation = false

    # type: bool
    # default: false
    # desc: enable workspace wraparound, causing directional workspace animations to animate as if the first and last workspaces were adjacent
    workspace_wraparound = false

    # Default animations, see https://wiki.hypr.land/Configuring/Animations/ for more
    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

input {
    # type: str
    # default: [[Empty]]
    # desc: Sets the cursor acceleration profile. Can be one of adaptive, flat, or custom. Leave empty to use libinput’s default mode.
    accel_profile =

    # type: int
    # default: 1
    # desc: Emulates discrete scrolling from high resolution scrolling events. 0 disables, 1 enables handling of non-standard events, 2 force enables all events.
    emulate_discrete_scroll = 1

    # type: int
    # default: 1
    # desc: If enabled (1 or 2), focus will change to the window under the cursor when changing from tiled-to-floating and vice versa. If 2, also follows mouse float-to-float.
    float_switch_override_focus = 1

    # type: int
    # default: 0
    # desc: Controls window focus behavior when a window is closed. 0 = next candidate, 1 = window under cursor.
    focus_on_close = 0

    # type: int
    # default: 1
    # desc: Specify if and how cursor movement should affect window focus. [0/1/2/3]
    follow_mouse = 1

    # type: float
    # default: 0.0
    # desc: Smallest distance in logical pixels the mouse needs to travel for the window under it to get focused. Works only with follow_mouse = 1.
    follow_mouse_threshold = 0.0

    # type: bool
    # default: false
    # desc: Force no cursor acceleration. Bypasses most pointer settings. May cause desynchronization.
    force_no_accel = false

    # type: str
    # default: [[Empty]]
    # desc: Path to custom .xkb file.
    kb_file =

    # type: str
    # default: us
    # desc: XKB keymap parameter: layout
    kb_layout = br

    # type: str
    # default: [[Empty]]
    # desc: XKB keymap parameter: model
    kb_model =

    # type: str
    # default: [[Empty]]
    # desc: XKB keymap parameter: options
    kb_options =

    # type: str
    # default: [[Empty]]
    # desc: XKB keymap parameter: rules
    kb_rules =

    # type: str
    # default: [[Empty]]
    # desc: XKB keymap parameter: variant
    kb_variant = abnt2

    # type: bool
    # default: false
    # desc: Switches RMB and LMB (left-handed mode).
    left_handed = false

    # type: bool
    # default: true
    # desc: If disabled, mouse focus won’t switch to hovered window unless mouse crosses boundary (when follow_mouse=1).
    mouse_refocus = true

    # type: bool
    # default: false
    # desc: Inverts scrolling direction. When enabled, scrolling moves content directly instead of scrollbar.
    natural_scroll = false

    # type: bool
    # default: false
    # desc: Engage numlock by default.
    numlock_by_default = true

    # type: int
    # default: 1
    # desc: Handles axis events around a focused window. 0=ignore, 1=send OOB coords, 2=fake pointer inside, 3=warp pointer inside.
    off_window_axis_events = 1

    # type: int
    # default: 600
    # desc: Delay before a held-down key is repeated (ms).
    repeat_delay = 600

    # type: int
    # default: 25
    # desc: Repeat rate for held-down keys (repeats per second).
    repeat_rate = 25

    # type: bool
    # default: false
    # desc: Determines how keybinds act with multiple layouts. False = use first layout always. True = use symbols of current layout.
    resolve_binds_by_sym = false

    # type: int
    # default: 0
    # desc: Scroll button ID. 0 = default. (Use `wev` to check IDs)
    scroll_button = 0

    # type: bool
    # default: false
    # desc: If enabled, pressing/releasing the scroll button toggles lock, so motion events become scroll events without holding the button.
    scroll_button_lock = false

    # type: float
    # default: 1.0
    # desc: Multiplier for scroll movement on external mice. (Separate setting for touchpads)
    scroll_factor = 1.0

    # type: str
    # default: [[Empty]]
    # desc: Scroll method. One of [2fg, edge, on_button_down, no_scroll].
    scroll_method =

    # type: str
    # default: [[Empty]]
    # desc: Scroll acceleration profile, when accel_profile=custom. Format: <step> <points>. Empty = flat curve.
    scroll_points =

    # type: float
    # default: 0.0
    # desc: Mouse sensitivity. Range [-1.0, 1.0]. libinput#pointer-acceleration
    sensitivity = 0.0

    # type: bool
    # default: false
    # desc: If enabled, having only floating windows in the special workspace will not block focusing windows in the regular workspace.
    special_fallthrough = false


    touchpad {
        # type: bool
        # default: false
        # desc: Button presses with 1, 2, or 3 fingers will be mapped to LMB, RMB, and MMB respectively.
        #       This disables interpretation of clicks based on location on the touchpad.
        #       libinput#clickfinger-behavior
        clickfinger_behavior = false

        # type: bool
        # default: true
        # desc: Disable the touchpad while typing.
        disable_while_typing = true

        # type: int
        # default: 0
        # desc: Enables three finger drag.
        #       0 -> disabled
        #       1 -> 3 fingers
        #       2 -> 4 fingers
        #       libinput#drag-3fg
        drag_3fg = 0

        # type: int
        # default: 0
        # desc: Tap-and-drag lock behavior.
        #       0 -> disabled
        #       1 -> enabled with timeout
        #       2 -> enabled sticky
        #       libinput#tap-and-drag
        drag_lock = 0

        # type: bool
        # default: false
        # desc: Inverts the horizontal movement of the touchpad.
        flip_x = false

        # type: bool
        # default: false
        # desc: Inverts the vertical movement of the touchpad.
        flip_y = false

        # type: bool
        # default: false
        # desc: Sending LMB and RMB simultaneously will be interpreted as a middle click.
        #       This disables any touchpad area that would normally send a middle click
        #       based on location.
        #       libinput#middle-button-emulation
        middle_button_emulation = false

        # type: bool
        # default: false
        # desc: Inverts scrolling direction. When enabled, scrolling moves content directly,
        #       rather than manipulating a scrollbar.
        natural_scroll = false

        # type: float
        # default: 1.0
        # desc: Multiplier applied to the amount of scroll movement.
        scroll_factor = 1.0

        # type: str
        # default: lrm
        # desc: Sets the tap button mapping for touchpad button emulation.
        #       Accepted values: "lrm" (Left, Right, Middle) or "lmr" (Left, Middle, Right).
        tap_button_map = lrm

        # type: bool
        # default: true
        # desc: Sets the tap-and-drag mode for the touchpad.
        tap-and-drag = true

        # type: bool
        # default: true
        # desc: Tapping on the touchpad with 1, 2, or 3 fingers will send LMB, RMB, and MMB respectively.
        tap-to-click = true
    }


    touchdevice {
        # type: bool
        # default: true
        # desc: Whether input is enabled for touch devices.
        enabled = true

        # type: string
        # default: [[Auto]]
        # desc: The monitor to bind touch devices.
        #       The default is auto-detection.
        #       To stop auto-detection, use an empty string ("") or [[Empty]].
        output = [[Auto]]

        # type: int
        # default: -1
        # desc: Transform the input from touch devices.
        #       Possible transformations are the same as for monitors.
        #       -1 means unset.
        transform = -1
    }

    # virtualkeyboard

    # tablet
}

# Per-device input config
# See https://wiki.hypr.land/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}

gestures {
    # type: bool
    # default: false
    # desc: Enable workspace swipe gesture on touchpad
    workspace_swipe = false

    # type: float
    # default: 0.5
    # desc: How much the swipe has to proceed in order to commence it.
    #       (0.7 -> if > 0.7 * distance, switch; if less, revert) [0.0 - 1.0]
    workspace_swipe_cancel_ratio = 0.5

    # type: bool
    # default: true
    # desc: Whether a swipe right on the last workspace should create a new one.
    workspace_swipe_create_new = true

    # type: bool
    # default: true
    # desc: If enabled, switching direction will be locked when you swipe past the direction_lock_threshold (touchpad only).
    workspace_swipe_direction_lock = true

    # type: int
    # default: 10
    # desc: Distance in px to swipe before direction lock activates (touchpad only)
    workspace_swipe_direction_lock_threshold = 10

    # type: int
    # default: 300
    # desc: Distance in px of the touchpad gesture
    workspace_swipe_distance = 300

    # type: int
    # default: 3
    # desc: Number of fingers for the touchpad gesture
    workspace_swipe_fingers = 3

    # type: bool
    # default: false
    # desc: If enabled, swiping will not clamp at neighboring workspaces but continue to further ones
    workspace_swipe_forever = false

    # type: bool
    # default: true
    # desc: Invert the direction (touchpad only)
    workspace_swipe_invert = true

    # type: bool
    # default: false
    # desc: If enabled, workspace_swipe_fingers is considered the minimum number of fingers to swipe
    workspace_swipe_min_fingers = false

    # type: int
    # default: 30
    # desc: Minimum speed in px per timepoint to force the change ignoring cancel_ratio. Setting to 0 disables this mechanic.
    workspace_swipe_min_speed_to_force = 30

    # type: bool
    # default: false
    # desc: Enable workspace swiping from the edge of a touchscreen
    workspace_swipe_touch = false

    # type: bool
    # default: false
    # desc: Invert the direction (touchscreen only)
    workspace_swipe_touch_invert = false

    # type: bool
    # default: false
    # desc: If enabled, swiping will use the r prefix instead of the m prefix for finding workspaces
    workspace_swipe_use_r = false
}

group {
    # type: bool
    # default: true
    # desc: Whether new windows will be automatically grouped into the focused unlocked group.
    #       Note: to disable auto_group only for specific windows, use the “group barred” window rule instead.
    auto_group = true

    # type: gradient
    # default: 0x66ffff00
    # desc: Active group border color
    col.border_active = 0x66ffff00

    # type: gradient
    # default: 0x66777700
    # desc: Inactive (out of focus) group border color
    col.border_inactive = 0x66777700

    # type: gradient
    # default: 0x66ff5500
    # desc: Active locked group border color
    col.border_locked_active = 0x66ff5500

    # type: gradient
    # default: 0x66775500
    # desc: Inactive locked group border color
    col.border_locked_inactive = 0x66775500

    # type: int
    # default: 1
    # desc: Whether dragging a window into an unlocked group will merge them.
    #       Options: 0 (disabled), 1 (enabled), 2 (only when dragging into the groupbar)
    drag_into_group = 1

    # type: bool
    # default: true
    # desc: Whether Hyprland should focus on the window that has just been moved out of the group
    focus_removed_window = true

    # type: bool
    # default: false
    # desc: Whether using movetoworkspace[silent] will merge the window into the workspace’s solitary unlocked group
    group_on_movetoworkspace = false

    # type: bool
    # default: true
    # desc: Whether new windows in a group spawn after the current window or at the group tail
    insert_after_current = true

    # type: bool
    # default: false
    # desc: Whether dragging a floating window into a tiled window groupbar will merge them
    merge_floated_into_tiled_on_groupbar = false

    # type: bool
    # default: true
    # desc: Whether window groups can be dragged into other groups
    merge_groups_on_drag = true

    # type: bool
    # default: true
    # desc: Whether one group will be merged with another when dragged into its groupbar
    merge_groups_on_groupbar = true


    groupbar {
        # type: gradient
        # default: 0x66ffff00
        # desc: Active group bar background color
        col.active = 0x66ffff00

        # type: gradient
        # default: 0x66777700
        # desc: Inactive (out of focus) group bar background color
        col.inactive = 0x66777700

        # type: gradient
        # default: 0x66ff5500
        # desc: Active locked group bar background color
        col.locked_active = 0x66ff5500

        # type: gradient
        # default: 0x66775500
        # desc: Inactive locked group bar background color
        col.locked_inactive = 0x66775500

        # type: bool
        # default: true
        # desc: Enables groupbars
        enabled = true

        # type: string
        # default: [[Empty]]
        # desc: Font used to display groupbar titles. Falls back to misc:font_family if not specified.
        font_family =

        # type: int
        # default: 8
        # desc: Font size of groupbar titles
        font_size = 8

        # type: font_weight
        # default: normal
        # desc: Font weight of active groupbar title
        font_weight_active = normal

        # type: font_weight
        # default: normal
        # desc: Font weight of inactive groupbar title
        font_weight_inactive = normal

        # type: int
        # default: 2
        # desc: Gap size between gradients
        gaps_in = 2

        # type: int
        # default: 2
        # desc: Gap size between gradients and window
        gaps_out = 2

        # type: bool
        # default: true
        # desc: Round only the gradient edges of the entire groupbar
        gradient_round_only_edges = true

        # type: int
        # default: 2
        # desc: How much to round the gradients
        gradient_rounding = 2

        # (does not exist)
        # type: float
        # default: 2.0
        # range: [2.0 - 10.0]
        # desc: Adjusts the curve for rounding gradient corners.
        #       Larger values are smoother. 2.0 = circle, 4.0 = squircle.
        # gradient_rounding_power = 2.0

        # type: bool
        # default: false
        # desc: Enables gradient effects
        gradients = false

        # type: int
        # default: 14
        # desc: Height of the groupbar
        height = 14

        # type: int
        # default: 0
        # desc: Height of gap between groupbar indicator and title
        indicator_gap = 0

        # type: int
        # default: 3
        # desc: Height of the groupbar indicator
        indicator_height = 3

        # type: bool
        # default: true
        # desc: Adds or removes the upper gap
        keep_upper_gap = true

        # type: int
        # default: 3
        # desc: Sets the decoration priority for groupbars
        priority = 3

        # type: bool
        # default: true
        # desc: Whether to render titles in the group bar decoration
        render_titles = true

        # type: bool
        # default: true
        # desc: Round only the indicator edges of the entire groupbar
        round_only_edges = true

        # type: int
        # default: 1
        # desc: How much to round the indicator
        rounding = 1

        # (does not exist)
        # type: float
        # default: 2.0
        # range: [2.0 - 10.0]
        # desc: Adjusts the curve for rounding indicator corners.
        #       Larger values are smoother. 2.0 = circle, 4.0 = squircle.
        # rounding_power = 2.0

        # type: bool
        # default: true
        # desc: Whether scrolling in the groupbar changes the active window
        scrolling = true

        # type: bool
        # default: false
        # desc: Render the groupbar as a vertical stack
        stacked = false

        # type: color
        # default: 0xffffffff
        # desc: Color for window titles in the groupbar
        text_color = 0xffffffff

        # type: color
        # default: unset (falls back to text_color)
        # desc: Color for inactive windows’ titles in the groupbar
        # text_color_inactive =

        # type: color
        # default: unset (falls back to text_color)
        # desc: Color for the active window’s title in a locked group
        # text_color_locked_active =

        # type: color
        # default: unset (falls back to text_color_inactive)
        # desc: Color for inactive windows’ titles in locked groups
        # text_color_locked_inactive =

        # type: int
        # default: 0
        # desc: Adjusts vertical position for titles
        text_offset = 0
    }
}

misc {
    # type: bool
    # default: false
    # desc: if true, will allow you to restart a lockscreen app in case it crashes
    allow_session_lock_restore = false

    # type: bool
    # default: true
    # desc: Will make mouse focus follow the mouse when drag and dropping. Recommended to leave it enabled, especially for people using focus follows mouse at 0.
    always_follow_on_dnd = true

    # type: bool
    # default: false
    # desc: If true, will animate manual window resizes/moves
    animate_manual_resizes = false

    # type: bool
    # default: false
    # desc: If true, will animate windows being dragged by mouse, note that this can cause weird behavior on some curves
    animate_mouse_windowdragging = false

    # type: int
    # default: 1
    # desc: number of missed pings before showing the ANR dialog
    anr_missed_pings = 1

    # type: color
    # default: 0x111111
    # desc: change the background color. (requires enabled disable_hyprland_logo)
    background_color = 0x111111

    # type: bool
    # default: true
    # desc: close the special workspace if the last window is removed
    close_special_on_empty = true

    # type: color
    # default: 0xffffffff
    # desc: Changes the color of the splash text (requires a monitor reload to take effect).
    col.splash = 0xffffffff

    # type: bool
    # default: false
    # desc: If true, the config will not reload automatically on save, and instead needs to be reloaded with hyprctl reload. Might save on battery.
    disable_autoreload = false

    # type: bool
    # default: false
    # desc: disables the random Hyprland logo / anime girl background. :(
    disable_hyprland_logo = true

    # type: bool
    # default: false
    # desc: disable the warning if hyprland-qtutils is not installed
    disable_hyprland_qtutils_check = false

    # type: bool
    # default: false
    # desc: disables the Hyprland splash rendering. (requires a monitor reload to take effect)
    disable_splash_rendering = true

    # type: bool
    # default: false
    # desc: disable the warning if XDG environment is externally managed
    disable_xdg_env_checks = false

    # type: bool
    # default: true
    # desc: whether to enable the ANR (app not responding) dialog when your apps hang
    enable_anr_dialog = true

    # type: bool
    # default: false
    # desc: Enable window swallowing
    enable_swallow = false

    # type: bool
    # default: false
    # desc: if true, closing a fullscreen window makes the next focused window fullscreen
    exit_window_retains_fullscreen = false

    # type: bool
    # default: false
    # desc: Whether Hyprland should focus an app that requests to be focused (an activate request)
    focus_on_activate = false

    # type: string
    # default: Sans
    # desc: Set the global default font to render the text including debug fps/notification, config error messages and etc., selected from system fonts.
    font_family = Sans

    # type: int
    # default: -1
    # desc: Enforce any of the 3 default wallpapers. Setting this to 0 or 1 disables the anime background. -1 means “random”. [-1/0/1/2]
    force_default_wallpaper = 0

    # type: int
    # default: 1
    # desc: if enabled, windows will open on the workspace they were invoked on.
    #       0 - disabled, 1 - single-shot, 2 - persistent (all children too)
    initial_workspace_tracking = 1

    # type: bool
    # default: false
    # desc: If DPMS is set to off, wake up the monitors if a key is pressed.
    key_press_enables_dpms = false

    # type: bool
    # default: true
    # desc: If true, will make keyboard-interactive layers keep their focus on mouse move (e.g. wofi, bemenu)
    layers_hog_keyboard_focus = true

    # type: int
    # default: 1000
    # desc: delay (ms) after which the “lockdead” screen will appear in case a lockscreen app fails to cover all the outputs (5 seconds max)
    lockdead_screen_delay = 1000

    # type: bool
    # default: true
    # desc: whether to enable middle-click-paste (aka primary selection)
    middle_click_paste = true

    # type: bool
    # default: false
    # desc: If DPMS is set to off, wake up the monitors if the mouse moves.
    mouse_move_enables_dpms = false

    # type: bool
    # default: true
    # desc: Whether mouse moving into a different monitor should focus it
    mouse_move_focuses_monitor = true

    # (does not exist)
    # type: bool
    # default: true
    # desc: Name virtual keyboards after the processes that create them.
    #       E.g. /usr/bin/fcitx5 → hl-virtual-keyboard-fcitx5
    # name_vk_after_proc = true

    # type: int
    # default: 0
    # desc: if there is a fullscreen or maximized window, decide whether a new tiled window opened should replace it, stay behind or disable the fullscreen/maximized state.
    #       0 - behind, 1 - takes over, 2 - unfullscreen/unmaximize
    new_window_takes_over_fullscreen = 0

    # type: int
    # default: 15
    # desc: the maximum limit for renderunfocused windows’ fps in the background (see also Window-Rules - renderunfocused)
    render_unfocused_fps = 15

    # type: bool
    # default: false
    # desc: if true, keep rendering workspaces below your lockscreen
    session_lock_xray = false

    # type: string
    # default: [[Empty]]
    # desc: Changes the font used to render the splash text, selected from system fonts (requires a monitor reload to take effect).
    splash_font_family = [[Empty]]

    # type: str
    # default: [[Empty]]
    # desc: The title regex to be used for windows that should not be swallowed by the windows specified in swallow_regex.
    #       Regex is matched against the parent window’s title.
    swallow_exception_regex = [[Empty]]

    # type: str
    # default: [[Empty]]
    # desc: The class regex to be used for windows that should be swallowed (usually, a terminal).
    swallow_regex = [[Empty]]

    # type: bool
    # default: true
    # desc: controls the VFR status of Hyprland. Heavily recommended to leave enabled to conserve resources.
    vfr = true

    # type: int
    # default: 0
    # desc: controls the VRR (Adaptive Sync) of your monitors.
    #       0 - off, 1 - on, 2 - fullscreen only, 3 - fullscreen with video or game content type
    vrr = 0
}


binds {
    # type: bool
    # default: false
    # desc: If enabled, Allow fullscreen to pinned windows, and restore their pinned status afterwards
    allow_pin_fullscreen = false

    # type: bool
    # default: false
    # desc: If enabled, workspaces don’t forget their previous workspace, so cycles can be created by switching to the first workspace in a sequence, then endlessly going to the previous workspace.
    allow_workspace_cycles = false

    # type: bool
    # default: false
    # desc: If enabled, apps that request keybinds to be disabled (e.g. VMs) will not be able to do so.
    disable_keybind_grabbing = false

    # type: int
    # default: 0
    # desc: Movement threshold in pixels for window dragging and c/g bind flags. 0 to disable and grab on mousedown.
    drag_threshold = 0

    # type: int
    # default: 0
    # desc: Sets the preferred focus finding method when using focuswindow/movewindow/etc with a direction.
    # 0 - history (recent have priority), 1 - length (longer shared edges have priority).
    focus_preferred_method = 0

    # type: bool
    # default: false
    # desc: If enabled, changing the active workspace (including to itself) will hide the special workspace on the monitor where the newly active workspace resides.
    hide_special_on_workspace_change = false

    # type: bool
    # default: false
    # desc: If enabled, dispatchers like moveintogroup, moveoutofgroup and movewindoworgroup will ignore lock per group.
    ignore_group_lock = false

    # type: bool
    # default: false
    # desc: If enabled, when on a fullscreen window, movefocus will cycle fullscreen, if not, it will move the focus in a direction.
    movefocus_cycles_fullscreen = false

    # type: bool
    # default: false
    # desc: If enabled, when in a grouped window, movefocus will cycle windows in the groups first, then at each ends of tabs, it’ll move on to other windows/groups.
    movefocus_cycles_groupfirst = false

    # type: bool
    # default: false
    # desc: If disabled, will not pass the mouse events to apps / dragging windows around if a keybind has been triggered.
    pass_mouse_when_bound = false

    # type: int
    # default: 300
    # desc: In ms, how many ms to wait after a scroll event to allow passing another one for the binds.
    scroll_event_delay = 300

    # type: bool
    # default: true
    # desc: If enabled, moving a window or focus over the edge of a monitor with a direction will move it to the next monitor in that direction.
    window_direction_monitor_fallback = true

    # type: bool
    # default: false
    # desc: If enabled, an attempt to switch to the currently focused workspace will instead switch to the previous workspace. Akin to i3’s auto_back_and_forth.
    workspace_back_and_forth = false

    # type: int
    # default: 0
    # desc: Whether switching workspaces should center the cursor on the workspace (0) or on the last active window for that workspace (1).
    workspace_center_on = 0
}

xwayland {
    # type: bool
    # default: true
    # desc: Create the abstract Unix domain socket for XWayland connections.
    # (XWayland restart is required for changes to take effect; Linux only)
    create_abstract_socket = true

    # type: bool
    # default: true
    # desc: Allow running applications using X11.
    enabled = true

    # type: bool
    # default: false
    # desc: Forces a scale of 1 on XWayland windows on scaled displays.
    force_zero_scaling = true

    # type: bool
    # default: true
    # desc: Uses the nearest neighbor filtering for XWayland apps, making them pixelated rather than blurry.
    use_nearest_neighbor = true
}

# opengl

# render

# cursor

ecosystem {
    # type: bool
    # default: false
    # desc: Whether to enable permission control.
    enforce_permissions = false

    # type: bool
    # default: false
    # desc: Disable the popup that shows up twice a year encouraging to donate.
    no_donation_nag = false

    # type: bool
    # default: false
    # desc: Disable the popup that shows up when you update Hyprland to a new version.
    no_update_news = false
}

# experimental

# debug

